<project name="haxeServer" basedir="." default="deploy-all">
	
	<property name="output.server.dir" value="output/server"/>
	<property name="output.admin.dir" value="output/admin"/>
	<property name="output.client.dir" value="output/client"/>
	
	<property file="local.properties"/>
	
	<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask">
		<classpath>
			<pathelement location="lib/svnant.jar"/>
			<pathelement location="lib/svnClientAdapter.jar"/>
			<pathelement location="lib/svnjavahl.jar"/>
			<pathelement location="lib/svnkit.jar"/>
		</classpath>
	</taskdef>
	<taskdef name="if" classname="ise.antelope.tasks.IfTask"
		classpath="lib/AntelopeTasks_3.5.1.jar" />
    <taskdef name="var" classname="ise.antelope.tasks.Variable"
		classpath="lib/AntelopeTasks_3.5.1.jar" />
	
	<target name="svn-update">
		<if name="svn.update" value="true">
			<svn javahl="false" svnkit="true" username="canab.ua" password="gM9by4kJ5MB2">
				<update dir=".."/>
			</svn>
			<else>
				<echo>disabled</echo>
			</else>
		</if>
	</target>
	
	<target name="deploy-all" depends="build-all, deploy-server, deploy-admin"/>
	<target name="build-all" depends="build-server, build-admin"/>
	
	<target name="deploy-server" depends="build-server">
		<delete dir="${server.deploy.dir}"/>
		<mkdir dir="${server.deploy.dir}"/>
	 	<copy todir="${server.deploy.dir}">
	 		<fileset dir="${output.server.dir}"/>
	 	</copy>
	</target>
	
	<target name="deploy-admin" depends="build-admin">
		<delete dir="${admin.deploy.dir}"/>
		<mkdir dir="${admin.deploy.dir}"/>
	 	<copy todir="${admin.deploy.dir}">
	 		<fileset dir="${output.admin.dir}"/>
	 	</copy>
	</target>
	
	<target name="build-server" depends="svn-update">
		<delete dir="${output.server.dir}"/>
		<mkdir dir="${output.server.dir}"/>
		<mkdir dir="${output.server.dir}/log"/>
		
	 	<copy file="../server/server-config.xml" todir="${output.server.dir}"/>
		<replace file="${output.server.dir}/server-config.xml" token="{host}" value="${server.config.host}"/>
		<replace file="${output.server.dir}/server-config.xml" token="{port}" value="${server.config.port}"/>
		<replace file="${output.server.dir}/server-config.xml" token="{login}" value="${server.config.login}"/>
		<replace file="${output.server.dir}/server-config.xml" token="{password}" value="${server.config.password}"/>
		<replace file="${output.server.dir}/server-config.xml" token="{verboseLog}" value="${server.config.verboseLog}"/>
		
		<var name="compiler.debug" value=""/>
		<if name="server.build.debug" value="true">
			<var name="compiler.debug" value="-debug"/>
		</if>
		
		<exec executable="${haxe.compiler}" failonerror="true">
			<arg line="-cp ../server/src"/>
			<arg line="-cp ../library"/>
			<arg line="-main Main"/>
			<arg line="-neko ${output.server.dir}/server.n"/>
			<arg line="${compiler.debug}"/>
		</exec>
	</target>
	
	<target name="build-client-lib" depends="svn-update" description="Build client SWC library">
		<delete dir="${output.client.dir}"/>
		<mkdir dir="${output.client.dir}"/>
		
		<var name="compiler.debug" value=""/>
		<if name="admin.build.debug" value="true">
			<var name="compiler.debug" value="-debug"/>
		</if>
		
		<exec executable="${haxe.compiler}" failonerror="true">
			<arg line="-cp ../client/src"/>
			<arg line="-cp ../library"/>
			<arg line="haxeserver.Library"/>
			<arg line="-swf9 ${output.client.dir}/remote-lib.swc"/>
			<arg line="${compiler.debug}"/>
		</exec>
	</target>
	
	<target name="build-admin" depends="svn-update, build-client-lib">
		<delete dir="${output.admin.dir}"/>
		<mkdir dir="${output.admin.dir}"/>
		
		<exec executable="${flex.compiler}" failonerror="true">
			<arg line="../admin/src/Main.mxml"/>
			<arg line="-define+=CONFIG::host,&quot;'${server.config.host}'&quot;"/>
			<arg line="-define+=CONFIG::port,${server.config.port}"/>
			<arg line="-define+=CONFIG::autologin,false"/>
			<arg line="-library-path+=${output.client.dir}"/>
			<arg line="-output=${output.admin.dir}/admin.swf"/>
			<arg line="-debug=${admin.build.debug}"/>
		</exec>
	</target>
</project>